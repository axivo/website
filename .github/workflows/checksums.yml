name: Update Module Checksums

on:
  pull_request:
    paths:
      - '*/go.mod'
      - '*/go.sum'

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  update:
    name: Update Module Checksums
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          extended: true
          hugo-version: 0.145.0

      - name: Update module checksums
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs/promises');
            const runGit = async (args) => (await exec.getExecOutput('git', args)).stdout.trim();
            try {
              await Promise.all([
                runGit(['config', 'user.name', 'github-actions[bot]']),
                runGit(['config', 'user.email', '41898282+github-actions[bot]@users.noreply.github.com'])
              ]);
              await runGit(['fetch', 'origin', process.env.GITHUB_HEAD_REF]);
              await runGit(['switch', process.env.GITHUB_HEAD_REF]);
              await exec.exec('hugo', ['mod', 'clean', '--all']);
              await exec.exec('hugo', ['mod', 'get', '-u', './...']);
              await Promise.all(['docs', 'k3s-cluster'].map(item => 
                exec.exec('hugo', ['mod', 'tidy', '-s', item])
              ));
              const files = (await runGit(['diff', '--name-only'])).split('\n').filter(Boolean);
              if (files.length === 0) {
                core.info('No file changes detected');
                return;
              }
              const additions = await Promise.all((await runGit(['diff', '--name-only', '--diff-filter=ACMR']))
                .split('\n')
                .filter(Boolean)
                .map(async file => {
                  const contents = await fs.readFile(file, 'utf-8');
                  return {
                    path: file,
                    contents: Buffer.from(contents).toString('base64')
                  };
                })
              );
              const deletions = (await runGit(['diff', '--name-only', '--diff-filter=D']))
                .split('\n')
                .filter(Boolean)
                .map(file => ({ path: file }));
              const input = {
                branch: {
                  repositoryNameWithOwner: context.payload.repository.full_name,
                  branchName: context.payload.pull_request.head.ref
                },
                expectedHeadOid: context.payload.pull_request.head.sha,
                fileChanges: {
                  additions: additions,
                  deletions: deletions
                },
                message: { headline: 'chore(github-action): update module checksums' }
              };
              const mutation = `
                mutation CreateCommitOnBranch($input: CreateCommitOnBranchInput!) {
                  createCommitOnBranch(input: $input) { commit { oid } }
                }
              `;
              const { createCommitOnBranch } = await github.graphql(mutation, { input });
              core.info('Signed commit created with OID: ' + createCommitOnBranch.commit.oid);
            } catch (error) {
              core.setFailed(error.message);
            }
